<?php
// -------------------------entetes de pages------------------------
function connectSQL(){
	$db=@mysql_connect($GLOBALS['params']['bdd']['db_host'],$GLOBALS['params']['bdd']['db_user'],$GLOBALS['params']['bdd']['db_pass']);
	@mysql_select_db($GLOBALS['params']['bdd']['db_name'],$db);	
	@mysql_query("SET NAMES 'utf8'");
	return $db;
}
function entete_page($title,$path) {
	if (!empty($path)){$addS="/";}else{$addS='';}
	echo ("<!DOCTYPE html public \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">
	<html xmlns=\"http://www.w3.org/1999/xhtml\">
	<head>
	<script type=\"text/javascript\"></script>	
	<META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">
	<META http-equiv=\"Cache-Control\" content=\"no-cache\">
	<META name=\"Author\" content=\"Guillaume VERNET\">	        
	<LINK rel=\"stylesheet\" type=\"text/css\" href=\"".$path.$addS."content/connexion.css\">\n
	<link rel=\"Stylesheet\" type=\"text/css\" href=\"".$path.$addS."content/jquery-ui/css/start/jquery-ui-1.8.6.custom.css\" />
	<title>$title</title>	
	");
}
function my_old($dob, $now = false){
	if (!$now) $now = date('d-m-Y');
	$dob = explode('-', $dob);
	$now = explode('-', $now);
	$old = $now[2]*12+$now[1]-$dob[2]*12-$dob[1]-($dob[0]>$now[0] ? 1 : 0);
	return array('year' => floor($old / 12), 'mnt' => $old % 12);
}
function Cryptage($MDP, $Clef){
	$LClef = strlen($Clef);
	$LMDP = strlen($MDP);	
	if ($LClef < $LMDP){
		$Clef = str_pad($Clef, $LMDP, $Clef, STR_PAD_RIGHT);
	}
	elseif ($LClef > $LMDP){
		$diff = $LClef - $LMDP;
		$_Clef = substr($Clef, 0, -$diff);
	}		
	return $MDP ^ $Clef; // La fonction envoie le texte crypté
		
}
function chiffre($texte, $cle)
{
	$alg = MCRYPT_RIJNDAEL_256;
	//$td = mcrypt_create_iv(mcrypt_get_iv_size($alg, MCRYPT_MODE_ECB), MCRYPT_RAND);
	$td = mcrypt_module_open(MCRYPT_RIJNDAEL_256, "", MCRYPT_MODE_ECB, "");
	mcrypt_generic_init($td, $cle, "00000000000000000000000000000000");
	$temp = @mcrypt_generic($td, $texte);
	mcrypt_generic_deinit ($td);
	return$temp;
}
function dechiffre($texte, $cle)
{
	$alg = MCRYPT_RIJNDAEL_256;
	$td = mcrypt_module_open(MCRYPT_RIJNDAEL_256, "", MCRYPT_MODE_ECB, "");
	mcrypt_generic_init($td, $cle, "00000000000000000000000000000000");
	$temp = @mdecrypt_generic($td, $texte);
	mcrypt_generic_deinit ($td);
	return $temp;
}
function hex2bin($h)
{
	if (!is_string($h)) return null;
	$r='';
	for ($a=0; $a<strlen($h); $a+=2) {
		$r.=chr(hexdec($h{$a}.$h{($a+1)}));
	}
	return $r;
}
function genererMDP ($longueur = 8){
	// initialiser la variable $mdp
	$mdp = "";

	// Définir tout les caractères possibles dans le mot de passe,
	// Il est possible de rajouter des voyelles ou bien des caractères spéciaux
	$possible = "2346789bcdfghjkmnpqrtvwxyzBCDFGHJKLMNPQRTVWXYZ";

	// obtenir le nombre de caractères dans la chaîne précédente
	// cette valeur sera utilisé plus tard
	$longueurMax = strlen($possible);

	if ($longueur > $longueurMax) {
		$longueur = $longueurMax;
	}

	// initialiser le compteur
	$i = 0;

	// ajouter un caractère aléatoire à $mdp jusqu'à ce que $longueur soit atteint
	while ($i < $longueur) {
		// prendre un caractère aléatoire
		$caractere = substr($possible, mt_rand(0, $longueurMax-1), 1);

		// vérifier si le caractère est déjà utilisé dans $mdp
		if (!strstr($mdp, $caractere)) {
			// Si non, ajouter le caractère à $mdp et augmenter le compteur
			$mdp .= $caractere;
			$i++;
		}
	}

	// retourner le résultat final
	return $mdp;
}
//Nettoyage des variables
/*function clean_var($var,$check){		
	if ($check=='s' || empty($check)){
		$var=filter_var($var, FILTER_SANITIZE_STRING);//nettoyage des var de type string	
	}
	if ($check=='i'){
		$var=filter_var($var, FILTER_VALIDATE_INT);//nettoyage des var de type int
	}
	if ($check=='f'){
		$var=filter_var($var, FILTER_VALIDATE_FLOAT);//nettoyage des var de type float
	}
	if (@mysql_ping()){
		if(ctype_digit($var)){
			$var = intval($var);
		}else{			// Pour tous les autres types
			if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()){
				$var = stripslashes($var);
			}				
			$var = mysql_real_escape_string($var);				
			$var = addcslashes($var, '%');
		}		
	}
	return $var;
}*/
function clean_var($var,$check){
	global $key,$source;   
	if ($check=='s' || empty($check)){		
		$var=filter_var($var, FILTER_SANITIZE_STRING);//nettoyage des var de type string
	}
	if ($check=='i'){		
		$var=filter_var($var, FILTER_VALIDATE_INT);//nettoyage des var de type int
	}
	if ($check=='f'){		
		$var=filter_var($var, FILTER_VALIDATE_FLOAT);//nettoyage des var de type float
	}
	if ($check=='sql'){	
		if(ctype_digit($var)){
			$var = intval($var);	
		}else{                  // Pour tous les autres types
			if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()){
				
				$var = stripslashes($var);
			}
			$var = @mysql_real_escape_string($var);
			$var = addcslashes($var, '%');			
		}
	}
	return $var;
}
?>